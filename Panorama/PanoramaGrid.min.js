class PanoramaGrid{constructor(e,t={}){this.containerElement=document.getElementById(e),this.containerElement?(this.options=Object.assign({},{columns:12,rowHeight:50,gap:5,targetRowCount:20,renderItemContent:null,minItemW:2,minItemH:2},t),this.options.renderItemContent&&"function"!=typeof this.options.renderItemContent?(console.warn("PanoramaGrid: options.renderItemContent must be a function."),this.options.renderItemContent=null):this.options.renderItemContent||console.warn("PanoramaGrid: renderItemContent callback not provided. Item content will not be rendered by Panorama."),this.items=[],this.itemIdCounter=0,this.draggedItem=null,this.draggedItemInitialLayout=null,this.dragInitialMousePos=null,this._boundHandleDragMove=null,this._boundHandleDragEnd=null,this.resizeItem=null,this.resizeItemInitialLayout=null,this.resizeInitialMousePos=null,this.resizeDirection=null,this._boundHandleResizeMove=null,this._boundHandleResizeEnd=null,this._events={},this.dragPlaceholderElement=null,this.currentRowHeight=this.options.rowHeight,this._init(),this._calculateCurrentRowHeight(),this._debouncedResizeHandler=this._debounce(this._handleGridResize.bind(this),250),window.addEventListener("resize",this._debouncedResizeHandler)):console.error(`PanoramaGrid: Container element with ID '${e}' not found.`)}_calculateCurrentRowHeight(){this.currentRowHeight=this.options.rowHeight}_debounce(e,t){let i;return(...n)=>{clearTimeout(i),i=setTimeout((()=>e.apply(this,n)),t)}}_handleGridResize(){if(this._calculateCurrentRowHeight(),this.containerElement){const e=getComputedStyle(this.containerElement),t=parseFloat(e.paddingLeft)||0,i=parseFloat(e.paddingRight)||0;this.containerElement.clientWidth,this.options.columns,this.options.gap,this.options.columns}this.items.forEach((e=>{e.element&&this._updateItemDOMPosition(e)}))}destroy(){this._debouncedResizeHandler&&window.removeEventListener("resize",this._debouncedResizeHandler),this._clearGrid(),this.containerElement.innerHTML=""}on(e,t){"function"==typeof t?(this._events[e]||(this._events[e]=[]),this._events[e].push(t)):console.warn("PanoramaGrid.on: callback must be a function.")}off(e,t){this._events[e]&&(this._events[e]=this._events[e].filter((e=>e!==t)))}_emit(e,...t){this._events[e]&&this._events[e].forEach((i=>{try{i(...t)}catch(t){console.error(`Error in PanoramaGrid event listener for ${e}:`,t,"Listener:",i)}}))}_init(){this.containerElement.classList.add("panorama-grid-custom-container"),this.containerElement.style.setProperty("--pg-columns",this.options.columns),this.containerElement.style.setProperty("--pg-gap",`${this.options.gap}px`)}addItem(e){if(!e||!e.layout||"number"!=typeof e.layout.x||"number"!=typeof e.layout.y||"number"!=typeof e.layout.w||"number"!=typeof e.layout.h)return console.error("PanoramaGrid: Invalid itemConfig or layout provided to addItem.",e),-1;if(e.layout.w<=0||e.layout.h<=0)return console.error("PanoramaGrid: Item layout width (w) and height (h) must be positive.",e.layout),-1;let t={...e.layout};t.w=Math.max(t.w,this.options.minItemW),t.h=Math.max(t.h,this.options.minItemH),t.x=Math.max(1,t.x),t.y=Math.max(1,t.y),t.x+t.w>this.options.columns+1&&(t.w<=this.options.columns?t.x=this.options.columns-t.w+1:(t.w=this.options.columns,t.x=1,console.warn(`PanoramaGrid: Item is wider than grid. Clamped width to ${this.options.columns}.`)));let i=!1;let n=0;if(this.items.length>0)do{i=!1;for(const e of this.items)if(this._isCollision(t,e.layout)){i=!0;break}if(i&&(t.y++,n++),n>=50){console.warn(`PanoramaGrid: Could not find a non-colliding position for new item after 50 attempts. Placing at last attempted y=${t.y}.`);break}}while(i);const o=++this.itemIdCounter,s={id:o,config:e,layout:t,element:null};return this.items.push(s),this._renderItem(s),this._emit("itemAdded",{...s,element:void 0}),o}removeItem(e){const t=this.items.findIndex((t=>t.id===e));if(-1===t)return console.warn(`PanoramaGrid: Item with ID ${e} not found. Cannot remove.`),!1;const i=this.items[t];return i.element&&i.element.parentNode===this.containerElement?this.containerElement.removeChild(i.element):console.warn(`PanoramaGrid: DOM element for item ID ${e} not found in container or already removed.`),this.items.splice(t,1),this._emit("itemRemoved",e,{...i,element:void 0}),!0}_isCollision(e,t){return!(e.x+e.w<=t.x||e.x>=t.x+t.w||e.y+e.h<=t.y||e.y>=t.y+t.h)}_renderItem(e){const t=document.createElement("div");t.className="panorama-grid-custom-item",t.setAttribute("data-item-id",e.id.toString()),t.style.gridColumnStart=e.layout.x,t.style.gridRowStart=e.layout.y,t.style.gridColumnEnd=`span ${e.layout.w}`,t.style.gridRowEnd=`span ${e.layout.h}`;const i=e.layout.h*this.currentRowHeight+(e.layout.h-1)*this.options.gap;t.style.height=`${i}px`;const n=document.createElement("div");n.className="panorama-grid-custom-item-content",t.appendChild(n);if(["n","s","e","w","nw","ne","sw","se"].forEach((i=>{const n=document.createElement("div");n.className=`pg-resize-handle pg-resize-handle-${i}`,n.setAttribute("data-direction",i),n.addEventListener("mousedown",(t=>{this._handleResizeStart(t,e)})),t.appendChild(n)})),this.containerElement.appendChild(t),e.element=t,t.classList.contains("panorama-grid-custom-item")||console.warn('PanoramaGrid Debug: itemElement is missing "panorama-grid-custom-item" class before renderItemContent call for ID:',e.id),n.classList.contains("panorama-grid-custom-item-content")||console.warn('PanoramaGrid Debug: contentElement is missing "panorama-grid-custom-item-content" class before renderItemContent call for ID:',e.id),this.options.renderItemContent)try{e.config&&void 0!==e.config.type?this.options.renderItemContent(e.config.type,e.config,n,e.id):(console.error(`PanoramaGrid: Item ID ${e.id} is missing 'type' in its config. Cannot render content.`),n.innerHTML="<p style=\"color:red;\">Error: Item config missing 'type'.</p>")}catch(t){console.error(`Error executing renderItemContent for item ID ${e.id}, type ${e.config.type}:`,t),n.innerHTML=`<p style="color:red;">Error rendering content. Type: ${e.config.type}</p>`}else n.innerHTML=`Item ID: ${e.id}, Type: ${e.config.type||"N/A"} (No renderer provided)`;t.addEventListener("mousedown",(t=>{this._handleDragStart(t,e)}))}_handleDragStart(e,t){0===e.button&&(e.preventDefault(),this.draggedItem=t,this.draggedItemInitialLayout={...t.layout},this.dragInitialMousePos={x:e.clientX,y:e.clientY},this.draggedItem.potentialLayout={...t.layout},this.dragPlaceholderElement||(this.dragPlaceholderElement=document.createElement("div"),this.dragPlaceholderElement.className="pg-drag-placeholder"),this.dragPlaceholderElement.style.gridColumnStart="",this.dragPlaceholderElement.style.gridRowStart="",this.dragPlaceholderElement.style.gridColumnEnd="",this.dragPlaceholderElement.style.gridRowEnd="",this.dragPlaceholderElement.style.width="",this.dragPlaceholderElement.style.height="",t.element&&t.element.classList.add("pg-dragging"),this._boundHandleDragMove=this._handleDragMove.bind(this),this._boundHandleDragEnd=this._handleDragEnd.bind(this),document.addEventListener("mousemove",this._boundHandleDragMove),document.addEventListener("mouseup",this._boundHandleDragEnd))}_handleDragMove(e){if(e.preventDefault(),!this.draggedItem||!this.dragInitialMousePos)return;const t=e.clientX-this.dragInitialMousePos.x,i=e.clientY-this.dragInitialMousePos.y;this.draggedItem.element.style.transform=`translate(${t}px, ${i}px)`;const n=getComputedStyle(this.containerElement),o=parseFloat(n.paddingLeft)||0,s=parseFloat(n.paddingRight)||0,a=(this.containerElement.clientWidth-o-s-(this.options.columns-1)*this.options.gap)/this.options.columns,r=this.currentRowHeight,l=Math.round(t/(a+this.options.gap)),d=Math.round(i/(r+this.options.gap));let m=this.draggedItemInitialLayout.x+l,h=this.draggedItemInitialLayout.y+d;if(m=Math.max(1,Math.min(m,this.options.columns-this.draggedItemInitialLayout.w+1)),h=Math.max(1,h),this.draggedItem.potentialLayout={x:m,y:h,w:this.draggedItemInitialLayout.w,h:this.draggedItemInitialLayout.h},this.dragPlaceholderElement){const e=this.draggedItem.potentialLayout;this.dragPlaceholderElement.style.gridColumnStart=e.x,this.dragPlaceholderElement.style.gridRowStart=e.y,this.dragPlaceholderElement.style.gridColumnEnd=`span ${e.w}`,this.dragPlaceholderElement.style.gridRowEnd=`span ${e.h}`;const t=e.h*this.currentRowHeight+(e.h-1)*this.options.gap;this.dragPlaceholderElement.style.height=`${t}px`;let i=!1;for(const t of this.items)if(t.id!==this.draggedItem.id&&this._isCollision(e,t.layout)){i=!0;break}i?(this.dragPlaceholderElement.style.backgroundColor="rgba(255, 0, 0, 0.2)",this.dragPlaceholderElement.style.borderColor="rgba(200, 0, 0, 0.7)",this.dragPlaceholderElement.style.borderStyle="solid"):(this.dragPlaceholderElement.style.backgroundColor="rgba(0, 123, 255, 0.1)",this.dragPlaceholderElement.style.borderColor="#007bff",this.dragPlaceholderElement.style.borderStyle="dashed"),this.dragPlaceholderElement.parentNode||this.containerElement.appendChild(this.dragPlaceholderElement)}}_updateItemDOMPosition(e){if(!e||!e.element||!e.layout)return void console.warn("PanoramaGrid: Cannot update DOM position for invalid item object.",e);e.element.style.gridColumnStart=e.layout.x,e.element.style.gridRowStart=e.layout.y,e.element.style.gridColumnEnd=`span ${e.layout.w}`,e.element.style.gridRowEnd=`span ${e.layout.h}`;const t=e.layout.h*this.currentRowHeight+(e.layout.h-1)*this.options.gap;e.element.style.height=`${t}px`}_handleDragEnd(e){if(e.preventDefault(),!this.draggedItem)return this._boundHandleDragMove&&document.removeEventListener("mousemove",this._boundHandleDragMove),this._boundHandleDragEnd&&document.removeEventListener("mouseup",this._boundHandleDragEnd),this._boundHandleDragMove=null,void(this._boundHandleDragEnd=null);if(this.dragPlaceholderElement&&this.dragPlaceholderElement.parentNode&&this.dragPlaceholderElement.parentNode.removeChild(this.dragPlaceholderElement),this.draggedItem.element&&(this.draggedItem.element.style.transform=""),this.draggedItem.potentialLayout){let e={...this.draggedItem.potentialLayout},t=!1;for(const i of this.items)if(i.id!==this.draggedItem.id&&this._isCollision(e,i.layout)){t=!0;break}if(t){console.warn(`PanoramaGrid: Collision detected for item ID ${this.draggedItem.id} at initial drop position. Attempting to find new spot.`);let t=!1;const i=30;let n={...e};for(let o=0;o<i;o++){n.y++;let i=!1;for(const e of this.items)if(e.id!==this.draggedItem.id&&this._isCollision(n,e.layout)){i=!0;break}if(!i){e={...n},t=!0;break}}t||(console.warn(`PanoramaGrid: Could not find non-colliding spot for item ID ${this.draggedItem.id} after ${i} attempts. Reverting to initial position.`),e={...this.draggedItemInitialLayout})}const i=JSON.stringify(e)!==JSON.stringify(this.draggedItemInitialLayout);this.draggedItem.layout={...e},i?this._emit("itemMoved",this.draggedItem.id,{...this.draggedItem.layout}):t&&console.warn(`PanoramaGrid: Item ID ${this.draggedItem.id} reverted to or resolved to initial position after collision. Layout:`,this.draggedItem.layout)}else this.draggedItem.layout={...this.draggedItemInitialLayout};this._updateItemDOMPosition(this.draggedItem),this.draggedItem.element&&this.draggedItem.element.classList.remove("pg-dragging"),document.removeEventListener("mousemove",this._boundHandleDragMove),document.removeEventListener("mouseup",this._boundHandleDragEnd),this.draggedItem=null,this.draggedItemInitialLayout=null,this.dragInitialMousePos=null,this._boundHandleDragMove=null,this._boundHandleDragEnd=null}_handleResizeStart(e,t){e.preventDefault(),e.stopPropagation(),0===e.button&&(this.resizeItem=t,this.resizeItemInitialLayout={...t.layout},this.resizeInitialMousePos={x:e.clientX,y:e.clientY},this.resizeDirection=e.target.dataset.direction,this.resizeItem.potentialLayout={...t.layout},t.element&&t.element.classList.add("pg-resizing"),this._boundHandleResizeMove=this._handleResizeMove.bind(this),this._boundHandleResizeEnd=this._handleResizeEnd.bind(this),document.addEventListener("mousemove",this._boundHandleResizeMove),document.addEventListener("mouseup",this._boundHandleResizeEnd))}_handleResizeMove(e){if(e.preventDefault(),!this.resizeItem||!this.resizeInitialMousePos)return;const t=e.clientX-this.resizeInitialMousePos.x,i=e.clientY-this.resizeInitialMousePos.y,n=getComputedStyle(this.containerElement),o=parseFloat(n.paddingLeft)||0,s=parseFloat(n.paddingRight)||0,a=(this.containerElement.clientWidth-o-s-(this.options.columns-1)*this.options.gap)/this.options.columns,r=this.currentRowHeight;let{x:l,y:d,w:m,h:h}=this.resizeItemInitialLayout;const u=Math.round(t/(a+this.options.gap)),c=Math.round(i/(r+this.options.gap)),g=this.resizeDirection;if(g.includes("n")){let e=this.resizeItemInitialLayout.y+c,t=this.resizeItemInitialLayout.h-c;e<1&&(t+=1-e,e=1),t<1&&(e=this.resizeItemInitialLayout.y+this.resizeItemInitialLayout.h-1,e<1&&(e=1),t=1),d=e,h=t}if(g.includes("s")&&(h=this.resizeItemInitialLayout.h+c),g.includes("w")){let e=this.resizeItemInitialLayout.x+u,t=this.resizeItemInitialLayout.w-u;e<1&&(t+=1-e,e=1),t<1&&(e=this.resizeItemInitialLayout.x+this.resizeItemInitialLayout.w-1,e<1&&(e=1),t=1),l=e,m=t}g.includes("e")&&(m=this.resizeItemInitialLayout.w+u),h<1&&(h=1),m<1&&(m=1),l<1&&(l=1),d<1&&(d=1),l+m>this.options.columns+1&&(g.includes("w")?(l=this.options.columns-m+1,l<1&&(m=this.options.columns,l=1)):m=this.options.columns-l+1),m<1&&(m=1),l<1&&(l=1),l+m>this.options.columns+1&&(m=this.options.columns-l+1),m=Math.max(m,this.options.minItemW),h=Math.max(h,this.options.minItemH),l+m>this.options.columns+1&&(g.includes("w")?(l=this.options.columns-m+1,l<1&&(l=1,m=this.options.columns)):m=this.options.columns-l+1),l<1&&(l=1),d<1&&(d=1),this.resizeItem.potentialLayout={x:l,y:d,w:m,h:h},this.resizeItem.element.style.gridColumnStart=l,this.resizeItem.element.style.gridRowStart=d,this.resizeItem.element.style.gridColumnEnd=`span ${m}`,this.resizeItem.element.style.gridRowEnd=`span ${h}`;const p=h*this.currentRowHeight+(h-1)*this.options.gap;this.resizeItem.element.style.height=`${p}px`}_handleResizeEnd(e){if(e.preventDefault(),!this.resizeItem)return this._boundHandleResizeMove&&document.removeEventListener("mousemove",this._boundHandleResizeMove),this._boundHandleResizeEnd&&document.removeEventListener("mouseup",this._boundHandleResizeEnd),this._boundHandleResizeMove=null,void(this._boundHandleResizeEnd=null);if(this.resizeItem.potentialLayout){const e=this.resizeItem.potentialLayout;let t=!1;for(const i of this.items)if(i.id!==this.resizeItem.id&&this._isCollision(e,i.layout)){t=!0;break}t?(console.warn(`PanoramaGrid: Collision detected for item ID ${this.resizeItem.id} with new layout. Reverting.`),this.resizeItem.layout={...this.resizeItemInitialLayout}):this.resizeItem.layout={...e}}else this.resizeItem.layout={...this.resizeItemInitialLayout};if(this.resizeItem.layout.w=Math.max(this.resizeItem.layout.w,this.options.minItemW),this.resizeItem.layout.h=Math.max(this.resizeItem.layout.h,this.options.minItemH),this.resizeItem.layout.x+this.resizeItem.layout.w>this.options.columns+1){let e=this.options.columns-this.resizeItem.layout.w+1;e<1?(this.resizeItem.layout.x=1,this.resizeItem.layout.w=this.options.columns):this.resizeItem.layout.x=e}this.resizeItem.layout.x<1&&(this.resizeItem.layout.x=1),this.resizeItem.layout.y<1&&(this.resizeItem.layout.y=1),this._updateItemDOMPosition(this.resizeItem);JSON.stringify(this.resizeItemInitialLayout)!==JSON.stringify(this.resizeItem.layout)&&this._emit("itemResized",this.resizeItem.id,{...this.resizeItem.layout}),this.resizeItem.element&&this.resizeItem.element.classList.remove("pg-resizing"),document.removeEventListener("mousemove",this._boundHandleResizeMove),document.removeEventListener("mouseup",this._boundHandleResizeEnd),this.resizeItem=null,this.resizeItemInitialLayout=null,this.resizeInitialMousePos=null,this.resizeDirection=null,this._boundHandleResizeMove=null,this._boundHandleResizeEnd=null}updateItemLayout(e,t){const i=this.items.find((t=>t.id===e));if(!i)return console.warn(`PanoramaGrid: Item with ID ${e} not found. Cannot update layout.`),!1;if(!t||"number"!=typeof t.x||"number"!=typeof t.y||"number"!=typeof t.w||"number"!=typeof t.h||t.w<=0||t.h<=0||t.x<1||t.y<1)return console.error("PanoramaGrid: Invalid newLayout provided (structure, type, or positive dimensions/coordinates).",t),!1;if(t.x+t.w>this.options.columns+1)return console.error("PanoramaGrid: newLayout exceeds grid column boundaries.",t),!1;let n=!1;for(const i of this.items)if(i.id!==e&&this._isCollision(t,i.layout)){n=!0;break}return n?(console.warn(`PanoramaGrid: Programmatic layout update for item ID ${e} would cause collision. Layout update rejected.`),this._emit("itemLayoutUpdateFailed",e,t,"collision"),!1):(i.layout={...t},this._updateItemDOMPosition(i),this._emit("itemLayoutUpdated",e,{...i.layout}),!0)}updateItemConfiguration(e,t){const i=this.items.find((t=>t.id===e));if(!i)return console.warn(`PanoramaGrid: Item with ID ${e} not found. Cannot update configuration.`),!1;if(i.element||console.warn(`PanoramaGrid: DOM element for item ID ${e} not found. Configuration updated, but cannot re-render content visually.`),!this.options.renderItemContent||"function"!=typeof this.options.renderItemContent)return console.warn(`PanoramaGrid: renderItemContent callback is not valid. Cannot re-render content for item ID ${e}. Configuration will be updated.`),i.config={...i.config,...t},this._emit("itemConfigUpdated",e,{...i.config}),!0;if(i.config={...i.config,...t},i.element){const t=i.element.querySelector(".panorama-grid-custom-item-content");if(!t)return console.warn(`PanoramaGrid: Content element (.panorama-grid-custom-item-content) not found for item ID ${e}. Cannot re-render content.`),this._emit("itemConfigUpdated",e,{...i.config}),!1;t.innerHTML="";try{i.config&&void 0!==i.config.type?this.options.renderItemContent(i.config.type,i.config,t,e):(console.error(`PanoramaGrid: Item ID ${e} is missing 'type' in its updated config. Cannot re-render content.`),t.innerHTML="<p style=\"color:red;\">Error: Item config missing 'type' after update.</p>")}catch(n){console.error(`Error executing renderItemContent for item ID ${e} after config update:`,n),t.innerHTML=`<p style="color:red;">Error re-rendering content. Type: ${i.config.type}</p>`}}return this._emit("itemConfigUpdated",e,{...i.config}),!0}_clearGrid(){this.items.forEach((e=>{e.element&&e.element.parentNode&&e.element.remove()})),this.items=[],this.itemIdCounter=0}loadLayout(e){if(!e||"object"!=typeof e||!Array.isArray(e.items))return console.error('PanoramaGrid: Invalid layoutData provided to loadLayout. Must include an "items" array.',e),!1;this._clearGrid(),e.options&&(Object.assign(this.options,e.options),this.containerElement&&(this.containerElement.style.setProperty("--pg-columns",this.options.columns),this.containerElement.style.setProperty("--pg-gap",`${this.options.gap}px`))),e.items.forEach((e=>{e.layout&&e.config&&void 0!==e.type?this.addItem({type:e.type,...e.config,layout:e.layout}):console.warn("PanoramaGrid: Skipping item in loadLayout due to missing layout, config, or type.",e)}));let t=0;return this.items.length>0&&(t=this.items.reduce(((e,t)=>Math.max(e,t.id)),0)),this.itemIdCounter=Math.max(e.itemIdCounter||0,t),this._emit("layoutLoaded"),!0}getLayout(){return{items:this.items.map((e=>{let t={};try{t=JSON.parse(JSON.stringify(e.config))}catch(i){console.warn(`PanoramaGrid: Could not fully serialize config for item ID ${e.id} due to non-JSON content. Proceeding with a shallow copy.`,i),t={...e.config}}const i=e.config.type,n={...e.layout};return delete t.type,delete t.layout,{id:e.id,type:i,config:t,layout:n}})),itemIdCounter:this.itemIdCounter,options:{...this.options}}}updateItemContent(e,t){const i=this.items.find((t=>t.id===e));if(!i)return console.warn(`PanoramaGrid: Item with ID ${e} not found. Cannot update content.`),!1;if(!i.element)return console.warn(`PanoramaGrid: DOM element for item ID ${e} not found. Cannot update content visually.`),i.config.content=t,!1;i.config.content=t;const n=i.element.querySelector(".panorama-grid-custom-item-content");return n?(n.innerHTML="","function"==typeof t?n.appendChild(t(i)):"string"==typeof t||"number"==typeof t?n.innerHTML=t:t instanceof HTMLElement?n.appendChild(t):t&&(console.warn(`PanoramaGrid: Item ID ${i.id} received unsupported newContent type.`,t),n.textContent="[Unsupported Content Type]"),this._emit("itemContentUpdated",i.id,i.config.content),!0):(console.warn(`PanoramaGrid: Content container element not found for item ID ${e}. Config updated, but DOM not.`),!1)}}