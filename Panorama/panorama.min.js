class Panorama{constructor(e){this.container=document.getElementById(e),this.gridContainer=document.getElementById("panorama-grid-container"),this.editingItemId=null,this.maxGridRows=100,this._createEditModal(),this.grid=new PanoramaGrid("panorama-grid-container",{columns:12,rowHeight:50,gap:10,renderItemContent:this._renderPanoramaItemContent.bind(this)}),this.addItemFromUrl=this.addItemFromUrl.bind(this);const t=document.getElementById("add-item-from-url-btn"),a=document.getElementById("item-url-input");t&&a?t.addEventListener("click",(()=>{const e=a.value.trim();e?(this.addItemFromUrl(e),a.value=""):alert("Please enter a URL.")})):console.warn('Panorama: "Add from URL" button or input field not found. Ensure demo_full.html is updated.')}_renderPanoramaItemContent(e,t,a,n){a?a.parentElement&&!a.parentElement.classList.contains("panorama-grid-custom-item")&&console.warn('Panorama Debug: contentContainerElement.parentElement does NOT have "panorama-grid-custom-item" class for itemId:',n,"Parent:",a.parentElement):console.warn("Panorama Debug: received contentContainerElement is null or undefined for itemId:",n);const o={id:n,type:e,config:t,layout:{}};if(a.parentElement||console.error("CRITICAL: Panorama - itemElement is NULL. Controls cannot be added for itemId:",n,"ContentContainer:",a),a)try{let e=a.querySelector(".panorama-item-controls");if(e)e.innerHTML="";else{e=document.createElement("div"),e.className="panorama-item-controls";a.parentElement.appendChild(e)}const t=document.createElement("button");t.className="panorama-item-menu-btn",t.textContent="â‹®",t.dataset.itemId=n.toString(),t.setAttribute("aria-haspopup","true"),t.setAttribute("aria-expanded","false");const o=document.createElement("div");o.className="panorama-item-menu-popup",o.style.display="none",o.dataset.itemId=n.toString();const r=document.createElement("a");r.href="#",r.className="panorama-edit-action",r.textContent="Edit",r.dataset.itemId=n.toString(),r.addEventListener("click",(e=>{e.preventDefault(),e.stopPropagation();const a=parseInt(e.target.dataset.itemId),n=this.grid.items.find((e=>e.id===a));n&&this._showEditModal({id:n.id,type:n.config.type,config:n.config}),o.style.display="none",t&&t.setAttribute("aria-expanded","false")})),o.appendChild(r);const i=document.createElement("a");i.href="#",i.className="panorama-delete-action",i.textContent="Delete",i.dataset.itemId=n.toString(),i.addEventListener("click",(e=>{e.preventDefault(),e.stopPropagation();const t=parseInt(e.target.dataset.itemId);this.removeItem(t)})),o.appendChild(i),e.appendChild(t),e.appendChild(o),t.addEventListener("click",(e=>{e.stopPropagation();const a="block"===o.style.display;if(document.querySelectorAll(".panorama-item-menu-popup").forEach((e=>{e!==o&&(e.style.display="none")})),document.querySelectorAll(".panorama-item-menu-btn").forEach((e=>{e!==t&&e.setAttribute("aria-expanded","false")})),!a){const e=o.style.visibility,a=o.style.display;o.style.visibility="hidden",o.style.display="block";const n=o.offsetHeight,r=t.getBoundingClientRect(),i=window.innerHeight-r.bottom,l=r.top;o.style.visibility=e,o.style.display=a,o.classList.remove("open-upwards"),i<n&&l>=n&&o.classList.add("open-upwards")}a?(o.style.display="none",t.setAttribute("aria-expanded","false"),o.classList.remove("open-upwards")):(o.style.display="block",t.setAttribute("aria-expanded","true"))}))}catch(e){console.error("Error creating controls for item",n,e)}else console.warn("Panorama Debug: contentContainerElement is null or undefined. Cannot add controls for itemId:",n);switch(e){case"text":this._renderText(o,a);break;case"title":this._renderTitle(o,a);break;case"image":this._renderImage(o,a);break;case"chart":this._renderChart(o,a);break;case"table":this._renderTable(o,a);break;default:console.warn(`Panorama: Unknown item type for content rendering: ${e}`),a.textContent=`Unknown item type: ${e}`}}renderDashboard(){}addItem(e,t,a){const n={type:e,...t,layout:a};return this.grid.addItem(n)}removeItem(e){this.grid.removeItem(e)}updateItemConfig(e,t,a){if(!a){let t=null;if(this.grid&&this.grid.items){const a=this.grid.items.find((t=>t.id===e));a&&a.config&&a.config.type&&(t=a.config.type)}if(!t)return void console.error("Panorama.updateItemConfig: Could not determine itemType. Update failed for item ID:",e);a=t,console.warn(`Panorama.updateItemConfig: itemType was missing, retrieved from grid item as '${a}'.`)}const n={type:a,...t};this.grid?this.grid.updateItemConfiguration(e,n):console.error("Panorama.updateItemConfig: this.grid is not initialized.")}updateItemLayout(e,t,a=!0){if(!this.grid)return void console.error("PanoramaGrid instance not available in Panorama.js");this.grid.updateItemLayout(e,t)||console.warn(`Panorama.js: updateItemLayout for item ${e} failed in PanoramaGrid.`)}saveDashboard(){const e=this.grid.getLayout();return JSON.stringify(e,null,2)}loadDashboard(e){try{const t=JSON.parse(e);return t&&"object"==typeof t?this.grid.loadLayout(t):(console.error("Panorama.loadDashboard: Invalid JSON data."),alert("Failed to load dashboard: Invalid JSON data."),!1)}catch(e){return console.error("Panorama.loadDashboard: Failed to parse or load dashboard:",e),alert(`Failed to load dashboard: ${e.message}`),!1}}_renderText(e,t){let a=t.querySelector(".text-host");a||(a=document.createElement("div"),a.className="text-host",t.appendChild(a)),a.innerHTML="";const n=document.createElement("p");n.textContent=e.config.content,n.style.margin="0",a.appendChild(n)}_renderTitle(e,t){const a=document.createElement(`h${e.config.level||1}`);a.textContent=e.config.text,t.appendChild(a)}_renderImage(e,t){const a=document.createElement("img");a.src=e.config.url,a.alt=e.config.alt||"Dashboard image",a.style.maxWidth="100%",a.style.maxHeight="100%",a.style.objectFit="contain",t.appendChild(a)}_renderChart(e,t){let a=t.querySelector(".chart-host");a?a.innerHTML="":(a=document.createElement("div"),a.className="chart-host",a.style.width="100%",a.style.height="100%",t.appendChild(a));const n=document.createElement("canvas");n.id=`chart-canvas-${e.id}`,n.style.width="100%",n.style.height="100%",a.appendChild(n);document.getElementById(n.id)||console.error(`PANORAMA DEBUG (pre-rAF): Canvas ${n.id} was NOT found in DOM immediately after appendChild! Item ID: ${e.id}`);const o={type:e.config.chartType,data:e.config.chartData||{labels:[],datasets:[]},options:e.config.chartOptions||{}};if(!o.type||!o.data.datasets||0===o.data.datasets.length)return console.error(`Chart item ${e.id} is missing 'chartType' or 'chartData.datasets'. Cannot render.`),void(a.innerHTML="<p style='color:red;'>Error: Chart type or data is missing.</p>");requestAnimationFrame((()=>{try{if(!document.getElementById(n.id))return console.error(`PANORAMA DEBUG (in-rAF): Canvas ${n.id} NOT found for item ${e.id} even in rAF.`),void(a&&(a.innerHTML=`<p style='color:red;'>Error: Chart canvas (ID: ${n.id}) not found in DOM for item ${e.id} during rAF. Chart cannot be rendered.</p>`));"function"==typeof PureChart?new PureChart(n.id,o):(console.error("Error: PureChart is not defined (rAF). Ensure PureChart.js is loaded."),a&&(a.innerHTML="<p style='color:red;'>Error: Chart library (PureChart) not found (rAF).</p>"))}catch(t){console.error(`Error rendering chart for item ${e.id} (via rAF):`,t),a&&(a.innerHTML=`<p style='color:red;'>Error rendering chart (ID: ${e.id}) via rAF: ${t.message}. Check console.</p>`)}}))}_renderTable(e,t){let a=t.querySelector(".table-host");a?a.innerHTML="":(a=document.createElement("div"),a.className="table-host",a.style.width="100%",a.style.height="100%",t.appendChild(a)),a.id||(a.id=`table-specific-container-${e.id}`);const n=a.id,o={containerId:n,jsonData:e.config.tableData,columns:e.config.tableColumns,...e.config.tableOptions||{}};return o.columns&&0!==o.columns.length?o.jsonData?void requestAnimationFrame((()=>{try{if(!document.getElementById(n))return console.error(`PANORAMA DEBUG (in-rAF): Table container ${n} NOT found for item ${e.id} even in rAF.`),void(a&&(a.innerHTML=`<p style='color:red;'>Error: Table container (ID: ${n}) not found in DOM for item ${e.id} during rAF. Table cannot be rendered.</p>`));"function"==typeof createDynamicTable?createDynamicTable(o):(console.error("Error: createDynamicTable function is not defined globally (rAF). Check Dynamic-table.js."),a&&(a.textContent="Error: Table library function not found (rAF)."))}catch(t){console.error(`Error rendering table for item ${e.id} (via rAF):`,t),a&&(a.textContent=`Error rendering table (ID: ${e.id}) via rAF: ${t.message}. Check console.`)}})):(console.error(`Table item ${e.id} is missing 'tableData'. Cannot render.`),void(a.textContent="Error: Table data is missing.")):(console.error(`Table item ${e.id} is missing 'tableColumns' in its configuration. Cannot render.`),void(a.textContent="Error: Table column configuration is missing."))}_createEditModal(){let e=document.getElementById("panorama-item-modal");if(e)this.modalElement=e,this.modalTitleElement=e.querySelector(".panorama-modal-header h2"),this.modalFormArea=e.querySelector(".panorama-modal-form-area"),this.saveModalButton=e.querySelector(".panorama-modal-save"),this.cancelModalButton=e.querySelector(".panorama-modal-cancel");else{this.modalElement=document.createElement("div"),this.modalElement.id="panorama-item-modal",this.modalElement.className="panorama-modal";const e=document.createElement("div");e.className="panorama-modal-content";const t=document.createElement("div");t.className="panorama-modal-header",this.modalTitleElement=document.createElement("h2"),t.appendChild(this.modalTitleElement),this.modalFormArea=document.createElement("div"),this.modalFormArea.className="panorama-modal-form-area";const a=document.createElement("div");a.className="panorama-modal-footer",this.saveModalButton=document.createElement("button"),this.saveModalButton.textContent="Save",this.saveModalButton.className="panorama-modal-save",this.cancelModalButton=document.createElement("button"),this.cancelModalButton.textContent="Cancel",this.cancelModalButton.className="panorama-modal-cancel",a.appendChild(this.saveModalButton),a.appendChild(this.cancelModalButton),e.appendChild(t),e.appendChild(this.modalFormArea),e.appendChild(a),this.modalElement.appendChild(e),document.body.appendChild(this.modalElement)}const t=this.cancelModalButton.cloneNode(!0);this.cancelModalButton.parentNode.replaceChild(t,this.cancelModalButton),this.cancelModalButton=t,this.cancelModalButton.addEventListener("click",(()=>this._hideModal()))}_populateModalFormForType(e,t,a={},n=null){const o="add"===t?"addItem":"editItem";let r="";switch(e){case"text":r=`\n          <label for="${o}Content">Content:</label>\n          <textarea id="${o}Content" class="panorama-modal-textarea">${a.content||""}</textarea>\n        `;break;case"title":r=`\n          <label for="${o}Text">Text:</label>\n          <input type="text" id="${o}Text" class="panorama-modal-input" value="${a.text||""}">\n          <label for="${o}Level">Level (1-6):</label>\n          <input type="number" id="${o}Level" class="panorama-modal-input" value="${a.level||2}" min="1" max="6">\n        `;break;case"image":r=`\n          <label for="${o}Url">Image URL:</label>\n          <input type="text" id="${o}Url" class="panorama-modal-input" value="${a.url||""}">\n          <label for="${o}Alt">Alt Text:</label>\n          <input type="text" id="${o}Alt" class="panorama-modal-input" value="${a.alt||""}">\n        `;break;case"chart":case"table":let n={};n="chart"===e?{chartType:"bar",chartData:{labels:["A","B"],datasets:[{label:"Series 1",values:[10,20]}]},chartOptions:{title:"New Chart"}}:{tableData:[{col1:"Val1",col2:"Val2"}],tableColumns:[{key:"col1",header:"Column 1"},{key:"col2",header:"Column 2"}],tableOptions:{caption:"New Table"}};r=`\n          <label for="${o}JsonConfig">JSON Configuration:</label>\n          <textarea id="${o}JsonConfig" class="panorama-modal-textarea" rows="10">${"add"===t?JSON.stringify(n,null,2):JSON.stringify(a,null,2)}</textarea>\n          <p><small>Edit the JSON configuration directly. Be careful with syntax.</small></p>\n        `;break;default:r="<p>Unknown item type selected.</p>"}"add"===t&&n?n.innerHTML=r:"edit"===t?this.modalFormArea.innerHTML=r:"add"!==t||n||(console.warn("_populateModalFormForType called in 'add' mode without targetElementForAddMode. Using modalFormArea."),this.modalFormArea.innerHTML=r)}_showAddItemModal(){this.editingItemId=null,this.modalTitleElement.textContent="Add New Item",this.modalFormArea.innerHTML='\n      <div class="control-group" style="margin-bottom: 15px;">\n        <label for="new-item-type" style="display: block; margin-bottom: 5px; font-weight: bold;">Item Type:</label>\n        <select id="new-item-type" class="panorama-modal-select" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; width: 100%;">\n          <option value="">-- Select Type --</option>\n          <option value="text">Text</option>\n          <option value="title">Title</option>\n          <option value="image">Image</option>\n          <option value="chart">Chart</option>\n          <option value="table">Table</option>\n        </select>\n      </div>\n      <div id="item-specific-form-fields">\n        <p style="text-align:center; color:#777; margin-top:10px;">Select an item type to configure.</p>\n      </div>\n    ';const e=this.modalFormArea.querySelector("#new-item-type"),t=this.modalFormArea.querySelector("#item-specific-form-fields");e.addEventListener("change",(e=>{const a=e.target.value;a?this._populateModalFormForType(a,"add",{},t):t.innerHTML='<p style="text-align:center; color:#777; margin-top:10px;">Select an item type to configure.</p>'}));const a=this.saveModalButton;this.saveModalButton=a.cloneNode(!0),a.parentNode.replaceChild(this.saveModalButton,a),this.saveModalButton.addEventListener("click",(()=>this._handleSaveModal("add"))),this.modalElement.style.display="block"}_showEditModal(e){this.editingItemId=e.id,this.modalTitleElement.textContent=`Edit ${e.type.charAt(0).toUpperCase()+e.type.slice(1)} Item (ID: ${e.id})`,this._populateModalFormForType(e.type,"edit",e.config);const t=this.saveModalButton;this.saveModalButton=t.cloneNode(!0),t.parentNode.replaceChild(this.saveModalButton,t),this.saveModalButton.addEventListener("click",(()=>this._handleSaveModal("edit",e.type))),this.modalElement.style.display="block"}_hideModal(){this.modalElement.style.display="none",this.editingItemId=null,this.modalFormArea.innerHTML=""}_handleSaveModal(e,t=null){let a={},n="";try{if("add"===e){if(n=document.getElementById("new-item-type").value,!n)return void alert("Please select an item type.");const e="addItem";switch(n){case"text":a.content=document.getElementById(`${e}Content`).value;break;case"title":a.text=document.getElementById(`${e}Text`).value,a.level=parseInt(document.getElementById(`${e}Level`).value)||1,(a.level<1||a.level>6)&&(a.level=1);break;case"image":a.url=document.getElementById(`${e}Url`).value,a.alt=document.getElementById(`${e}Alt`).value;break;case"chart":case"table":const t=document.getElementById(`${e}JsonConfig`).value;a=JSON.parse(t);break;default:return console.warn("Attempted to save unhandled new item type:",n),void this._hideModal()}}else{if("edit"!==e)return console.error("Unknown mode for _handleSaveModal:",e),void this._hideModal();{if(!this.editingItemId||!t)return console.error("Save error: Editing item ID or type is missing."),void this._hideModal();n=t;const e="editItem";switch(n){case"text":a.content=document.getElementById(`${e}Content`).value;break;case"title":a.text=document.getElementById(`${e}Text`).value,a.level=parseInt(document.getElementById(`${e}Level`).value)||1,(a.level<1||a.level>6)&&(a.level=1);break;case"image":a.url=document.getElementById(`${e}Url`).value,a.alt=document.getElementById(`${e}Alt`).value;break;case"chart":case"table":const t=document.getElementById(`${e}JsonConfig`).value;a=JSON.parse(t);break;default:return console.warn("Attempted to save unhandled existing item type:",n),void this._hideModal()}}}}catch(e){return alert(`Error parsing configuration: ${e.message}\nPlease check the JSON syntax if editing chart/table or providing new JSON.`),void console.error("Error processing configuration for save:",e)}if("add"===e){let e={x:0,y:0,w:4,h:2};switch(n){case"title":e.h=1,e.w=6;break;case"text":e.h=2,e.w=4;break;case"image":e.h=3,e.w=5;break;case"chart":e.h=4,e.w=6;break;case"table":e.h=3,e.w=6}this.addItem(n,a,e)}else"edit"===e&&this.updateItemConfig(this.editingItemId,a,n);this._hideModal()}async addItemFromUrl(e){if(e)try{const t=await fetch(e);if(!t.ok)throw new Error(`Network response was not ok: ${t.statusText}`);const a=await t.json();if(!a||"object"!=typeof a)return alert("Invalid JSON format: Data is not an object."),void console.error("Invalid JSON format from URL:",a);const{type:n,config:o,layout:r}=a;if(!n||"string"!=typeof n)return alert('Invalid item data: "type" is missing or not a string.'),void console.error('Missing or invalid "type" in JSON from URL:',a);if(!o||"object"!=typeof o)return alert('Invalid item data: "config" is missing or not an object.'),void console.error('Missing or invalid "config" in JSON from URL:',a);if(!r||"object"!=typeof r)return alert('Invalid item data: "layout" is missing or not an object.'),void console.error('Missing or invalid "layout" in JSON from URL:',a);if("number"!=typeof r.x||"number"!=typeof r.y||"number"!=typeof r.w||"number"!=typeof r.h)return alert('Invalid item data: "layout" properties (x, y, w, h) must be numbers.'),void console.error('Invalid "layout" properties in JSON from URL:',a);this.addItem(n,o,r)}catch(e){alert(`Failed to add item from URL: ${e.message}`),console.error("Error in addItemFromUrl:",e)}else alert("URL cannot be empty.")}}